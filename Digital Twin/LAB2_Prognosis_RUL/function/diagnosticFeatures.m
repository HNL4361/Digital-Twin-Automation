function [featureTable,ranking,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices' containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  ranking: A table containing ranking scores for selected features.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  velocity_stats/ClearanceFactor
%  velocity_stats/CrestFactor
%  velocity_stats/ImpulseFactor
%  velocity_stats/Kurtosis
%  velocity_stats/Mean
%  velocity_stats/PeakValue
%  velocity_stats/RMS
%  velocity_stats/SINAD
%  velocity_stats/SNR
%  velocity_stats/ShapeFactor
%  velocity_stats/Skewness
%  velocity_stats/Std
%  velocity_stats/THD
%
% This function ranks computed feautres using algorithms:
%  Monotonicity
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
% 3. Rank features
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 2022-04-11 14:37:21

% 출력 앙상블을 생성합니다.
inputData = tt;
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"velocity");

% 앙상블을 재설정하여 앙상블의 시작 부분부터 읽어옵니다.
reset(outputEnsemble);

% DataVariables에 새 신호 이름 또는 특징 이름을 추가합니다.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"velocity_stats"],'stable');

% SelectedVariables를 설정하여 앙상블에서 읽어올 변수를 선택합니다.
outputEnsemble.SelectedVariables = "velocity";

% 모든 앙상블 멤버를 순환하면서 데이터를 읽고 씁니다.
while hasdata(outputEnsemble)
    % 하나의 멤버를 읽어옵니다.
    member = read(outputEnsemble);
    
    % 모든 입력 변수를 가져옵니다.
    velocity = readMemberData(member,"velocity");
    iv = (0:1:height(velocity)-1)';
    velocity.Sample = iv;
    
    % 결과를 저장하기 위하여 테이블을 초기화합니다.
    memberResult = table;
    
    %% SignalFeatures
    try
        % 신호 특징을 계산합니다.
        inputSignal = velocity.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);
        
        % 신호 특징을 결합합니다.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];
        
        % 계산된 특징을 테이블에 패키징합니다.
        featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","SINAD","SNR","ShapeFactor","Skewness","Std","THD"];
        velocity_stats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % 계산된 특징을 테이블에 패키징합니다.
        featureValues = NaN(1,13);
        featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","SINAD","SNR","ShapeFactor","Skewness","Std","THD"];
        velocity_stats = array2table(featureValues,'VariableNames',featureNames);
    end
    
    % 계산된 결과를 member 테이블에 추가합니다.
    memberResult = [memberResult, ...
        table({velocity_stats},'VariableNames',"velocity_stats")]; %#ok<AGROW>
    
    %% 현재 멤버의 모든 결과를 앙상블에 작성합니다.
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% 모든 특징을 테이블에 수집합니다.
featureTable = readFeatureTable(outputEnsemble);

% Feature ranking for FeatureTable1
selectedFeatureNames = ["velocity_stats/ClearanceFactor","velocity_stats/CrestFactor","velocity_stats/ImpulseFactor","velocity_stats/Kurtosis","velocity_stats/Mean","velocity_stats/PeakValue","velocity_stats/RMS","velocity_stats/SINAD","velocity_stats/SNR","velocity_stats/ShapeFactor","velocity_stats/Skewness","velocity_stats/Std","velocity_stats/THD"];

% Initialize an empty matrix to store ranking scores
score = zeros(numel(selectedFeatureNames),0);

% Initialize a string array to store ranking method names
methodList = strings(0);

%% Monotonicity
% 단조 특성(Monotonicity) 계산을 위해 수명 변수를 생성합니다.
featureTable.Time = (1:height(featureTable))';

% 단조 특성(Monotonicity) 계산을 위해 멤버 변수를 생성합니다.
featureTable.MemberVariable = ones(height(featureTable),1);

% Monotonicity을(를) 사용하여 순위 점수를 계산합니다.
z = monotonicity(featureTable,'DataVariables',selectedFeatureNames,'LifetimeVariable',"Time",'MemberVariable',"MemberVariable");
z = z.Variables';

% 새 점수와 방법 이름을 추가합니다.
score = [score,z];
methodList = [methodList,"단조 특성"];


%% Create ranking result table
featureColumn = table(selectedFeatureNames(:),'VariableNames',{'Features'});
ranking = [featureColumn array2table(score,'VariableNames',methodList)];
ranking = sortrows(ranking,'단조 특성','descend');

% SelectedVariables를 설정하여 앙상블에서 읽어올 변수를 선택합니다.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% 결과를 테이블에 수집합니다.
outputTable = readall(outputEnsemble);
end
